name: Mirroring

on: [push, delete]

jobs:
  push_to_mirror:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ vars.MIRROR_URL }} 
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }} 
  jobs_v2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: make
     
  check_coding_style:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: check.sh $(pwd) $(pwd)
      - run: |
          while read line; do
              offending_file="$(echo "$line" | cut -d':' -f1 | cut -c 3-)"
              offending_line="$(echo "$line" | cut -d':' -f2)"
              error_level="$(echo "$line" | cut -d':' -f3 | cut -c 2-)"
              error_type="$(echo "$line" | cut -d':' -f4)"
              echo "::error file=$offending_file,line=$offending_line,title=$error_level coding style error::$error_type"
          done < "coding-style-reports.log"

  check_program_compilation:
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: timeout 2m make
      - run: |
          make clean
          EXECUTABLES=${{ vars.EXECUTABLES }}
          for exe in $EXECUTABLES; do
            if [ ! -x "$exe" ]; then
              exit 1
            fi
          done

  run_tests:
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: timeout 2m make tests_run


